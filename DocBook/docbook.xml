<?xml version="1.0" encoding="UTF-8"?>
<!-- ?xml-stylesheet type="text/xsl" href="docbook-xsl-ns-1.78.1/xhtml/docbook.xsl"? -->
<article xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" >    
	<info>
		<title>IDENTITY ACCESS MANAGEMENT</title>
		<subtitle>
		<inlinemediaobject>
			<imageobject>
			<imagedata fileref="resources/EPITA.png" width="100%" />
			</imageobject>
		</inlinemediaobject>
		<productname >Technical Specification</productname>
		<productnumber>1.0</productnumber>
		</subtitle>
		<author>
			<personname>
				<honorific>Mr</honorific>
				<firstname>RAHUL KUMAR</firstname>
				<surname>THAI VALAPPIL</surname>
			</personname>
		</author>
		<edition>1.0</edition>
		<orgname>Epita Login- thaiva_r</orgname>	
	</info>
	<sect1>
     <title>1. Subject description</title>
     <para>Identity Access Management(IAM) System is an administrative application that deals with manipulation and management of individual identities, their authentication within or across system. The application must perform basic CRUD (Create, Read, Update and Delete) operations on a persistent storage system such as database. The term “User” is used as “the person who will manage the information” and the term “Identity” is used to signify the “information of user in the system”.</para>	
   	</sect1>
   <sect1>
		<title>2. Subject Analysis</title>
   		<sect2>
        	<title>2.1. Major features</title>
       		<para>
    		<simplelist>
    			<member>The application must allow the users to maintain and manipulate their identity information through a web interface. Every identity entity being comprised of first name, last name, email address and data birth and these details will persist in server database. Additionally, it should include a layer of security for a login process that will restrict the access from unauthorized users.</member>
    			<member>Application allows user to perform below functions related to his/her information:</member>
    		</simplelist>
    	</para>
    	<itemizedlist>
   			<listitem>
   				<para>Configure User account for authentication with purchased license</para>
   			</listitem>
   			<listitem>
   				<para>Login with valid credential</para>
   			</listitem>
   			<listitem>
   				<para>Create an Identity</para>
   			</listitem>
   			<listitem>
   				<para>Search identities from the system</para>
   			</listitem>
   			<listitem>
   				<para>Update an existing Identity</para>
   			</listitem>
   			<listitem>
   				<para>Delete an existing Identity</para>
   			</listitem>
   		</itemizedlist>
   		</sect2>
    	<sect2>
        	<title>2.2. Application Feasibility</title>
         	<para>The application has to be accessed through a web browser.  Depends on the server configure, the application would allow to deploy on a server with full capabilities of being accessible from within the network, or even online.</para>
    	</sect2>
    	<sect2>
        	<title>2.3. Data description</title>
         	<para>The application will use Derby database with tables for both Identity management and user authentication. The Hibernate and Spring frameworks are used to communicate between application business layer and data layer. Following are the data representation corresponds to Identity and User table.</para>
         	<sect3>
         		<title>2.3.1. Identity</title>
         		<para>Identity represents following data:</para>
         		<itemizedlist>
         			<listitem>
         				<para>Id – Automatically generated field within hibernate</para>
         			</listitem>
         			<listitem>
         				<para>firstName -String</para>
         			</listitem>
         			<listitem>
         				<para>lastName -String</para>
         			</listitem>
         			<listitem>
         				<para>email – String</para>
         			</listitem>
         			<listitem>
         				<para>birthdate - Date </para>
         			</listitem>
         		</itemizedlist>
         	</sect3>
         	<sect3>
         		<title>2.3.2. User</title>
         		<para>User represents following data:</para>
         		<itemizedlist>
         			<listitem>
         				<para>Id - Automatically generated field within hibernate</para>
         			</listitem>
         			<listitem>
         				<para>Username – String</para>
         			</listitem>
         			<listitem>
         				<para>Password – using java simplified pooled digester to encrypt the data.</para>
         			</listitem>
         		</itemizedlist>
         		<para>Additionally, license needs to register a user is hard coded in Spring application context xml, so currently additional user creation is not possible. </para>
         	</sect3>
    	</sect2>
    	<sect2>
        	<title>2.4. Expected results</title>
         	<para>End user should able to perform following functionalities and HTML pages will be loaded with some JavaScript and CSS functionality for the ease of use and aesthetics.</para>
         	<itemizedlist>
         			<listitem>
         				<para>Configure user authentication</para>
         			</listitem>
         			<listitem>
         				<para>Perform user authentication</para>
         			</listitem>
         			<listitem>
         				<para>Create an Identity</para>
         			</listitem>
         			<listitem>
         				<para>Search Identities</para>
         			</listitem>
         			<listitem>
         				<para>Update an Identity</para>
         			</listitem>
         			<listitem>
         				<para>Delete an Identity </para>
         			</listitem>
         		</itemizedlist>
         		<para>The user will have two main HTML pages, one for user authentication and other for performing CRUD operations.</para>
    	</sect2>
    	<sect2>
        	<title>2.5. Algorithms study</title>
         	<para>Application should adopt a simple MVC paradigm with help of Spring framework as business layer and Hibernate session factory as data layer. When user performs actions the view should send data request to the controller. This controller will contact data model in order to produce data requested and send back to the view where it will have visualized in HTML format. To improve security of the system user password data should be encrypted before storing in database. </para>
    	</sect2>
    	<sect2>
        	<title>2.6. Scope of the application (limits, evolutions)</title>
         	<sect3>
         		<title>2.6.1. Limits</title>
         		<itemizedlist>
         			<listitem>
         				<para>The application will do no more than the basic CRUD operations of Identity and user authentication</para>
         			</listitem>
         			<listitem>
         				<para>Deletion or update can perform only one identity at a time</para>
         			</listitem>
         			<listitem>
         				<para>Currently user management option is not exposed to the user layer</para>
         			</listitem>
         			<listitem>
         				<para>Identity fields and criteria for search are not configurable</para>
         			</listitem>
         			<listitem>
         				<para>License issuer is not implemented, so currently using a hard coded license which restricts registration of multiple user account in one system</para>
         			</listitem>
         		</itemizedlist>
         	</sect3>
         	<sect3>
         		<title>2.6.1. Evolutions</title>
         		<itemizedlist>
         			<listitem>
         				<para>Separate configuration or setting page for managing user accounts</para>
         			</listitem>
         			<listitem>
         				<para>License issuer module which is responsible for issuing new license and deciding the user access level</para>
         			</listitem>
         			<listitem>
         				<para>An option to configure Identity fields and criteria for search in administrative level</para>
         			</listitem>
         			<listitem>
         				<para>Multiple Identities can be deleted or updated at a time</para>
         			</listitem>
         		</itemizedlist>
         	</sect3>
    	</sect2>
   </sect1>
   <sect1>
   		<title>3. Conception</title>
   		<sect2>
        	<title>3.1. Chosen algorithm</title>
       		<para>Chosen Java simplified encryption(jasypt) to encrypt user password before storing to database. The standard and simplified way allows to configure the algorithm through spring application context. The jasypt hashing lets to specify the algorithm (and provider) to be used for creating digests, the size of the salt to be applied, the number of times the hash function will be applied (iterations) and the salt generator to be used. Following are the current digest properties.</para>
   		</sect2>
   		<sect2>
        	<title>3.2. Data Structures</title>
       		<para>Application mainly Spring Framework, so it provides a comprehensive programming and configuration model for application. Spring allows to execute operation such as database without having to deal with actual database API’s through dependency injection and inversion of control. Also application using Data Access Object patterns which allows flexibility in choosing business service level of identity data. Currently application using Hibernate framework for mapping identity object model to derby database.
       		<simplelist>
     			<member>pool Size -		2</member>
     			<member>Algorithm -		SHA-256</member>
     			<member>Iterations -		100</member>
     			<member>salt Generator -	org. jasypt. salt. RandomSaltGenerator</member>
     			<member>salt Size Bytes -	16</member>
     		</simplelist>
     		</para>
   		</sect2>
   		<sect2>
        	<title>3.3. Global application flow</title>
        	<mediaobject>
	       		<imageobject>
				<imagedata fileref="resources/App_FlowChart.png" />
				</imageobject>
			</mediaobject>
   		</sect2>
   		<sect2>
        	<title>3.4.	Global schema and major features schema</title>
       		<mediaobject>
	       		<imageobject>
				<imagedata fileref="resources/GlobalSchema.png" />
				</imageobject>
			</mediaobject>
   		</sect2>
   </sect1>
   <sect1>
   		<title>4. GUI Operations Description</title>
   		<sect2>
        	<title>4.1. Login page</title>
       		<para>Page consist of user login and registration options. Already registered user can enter their username and password for authentication otherwise need to register with valid license by clicking register button.</para>
       		<figure><title>IAM Login Page</title>
			<mediaobject>
			  <imageobject>
			    <imagedata fileref="resources/Login_Page.png" width="100%"/>
			  </imageobject>
			</mediaobject>
			</figure>
   		</sect2>
   		<sect2>
        	<title>4.2. Home page</title>
       		<para>The page where user can choose their CRUD operations. Home page will get called once the user successfully authenticates his credential.</para>
       		<figure><title>IAM Welcome Page</title>
			<mediaobject>
			  <imageobject>
			    <imagedata fileref="resources/Welcome_Page.png" width="100%"/>
			  </imageobject>
			</mediaobject>
			</figure>
   		</sect2>
   		<sect2>
        	<title>4.3. Create Page</title>
       		<para>The page provides facility to create new identities by entering details. Application will redirect to create page once user clicks on Create option from Home page. The page notify to user if any error happened during the create operation.</para>
       		<figure><title>IAM Create Page</title>
			<mediaobject>
			  <imageobject>
			    <imagedata fileref="resources/Create_Page.png" width="100%"/>
			  </imageobject>
			</mediaobject>
			</figure>
   		</sect2>
   		<sect2>
        	<title>3.4.	Search Page</title>
       		<para>The page facilitate user to search identity from their email address and provide an option to update or delete the identities. </para>
       		<figure><title>IAM Search Page</title>
			<mediaobject>
			  <imageobject>
			    <imagedata fileref="resources/Search_Page.png" width="100%"/>
			  </imageobject>
			</mediaobject>
			</figure>
			<figure><title>IAM Update Operation</title>
			<mediaobject>
			  <imageobject>
			    <imagedata fileref="resources/Update_Page.png" width="100%"/>
			  </imageobject>
			</mediaobject>
			</figure>
			<figure><title>IAM Delete Operation</title>
			<mediaobject>
			  <imageobject>
			    <imagedata fileref="resources/Delete_Page.png" width="100%"/>
			  </imageobject>
			</mediaobject>
			</figure>
   		</sect2>
   </sect1>
   <sect1>
   		<title>5. Configuration instructions</title>
   		<orderedlist>
   			<listitem>
   				<para>Install latest Java run time environment</para>
   			</listitem>
   			<listitem>
   				<para>Install Apache tomcat server and start the server</para>
   			</listitem>
   			<listitem>
   				<para>User should install the Apache Derby database before doing any operation and start the derby Server by executing startNetworkServer.bat from Derby installation folder. Please visit following links for more details </para>
   				<para><link xlink:href = "https://db.apache.org/derby/papers/DerbyTut/install_software.html">https://db.apache.org/derby/papers/DerbyTut/install_software.html</link></para>
   			</listitem>
   			<listitem>
   				<para>Deploy the IAMWEB application using the Tomcat Host Manager</para>
   			</listitem>
   			<listitem>
   				<para>Configure log file location in log4j.properties from resource folder</para>
   				<para><emphasis>log4j.appender.file.File=./log/trace.log</emphasis></para>
   			</listitem>
   			<listitem>
   				<para>For First time user. register with valid license is mandatory to access the Identity management system</para>
   				<para><emphasis>License - 23a4a4bd-83a9-4b95-be9a-638bf5fd35f3</emphasis></para>
   			</listitem>
   		</orderedlist>
  		<figure><title>IAM Configuration</title>
		<mediaobject>
		  <imageobject>
		    <imagedata fileref="resources/Conf_Page.png" width="100%"/>
		  </imageobject>
		</mediaobject>
		</figure>
   </sect1>
   <sect1>
   		<title>5. Commented Screenshots</title>
   		<example> <title>Authentication DAO Interface</title>
   		<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/Screenshot_1.png" width="100%"/>
		  </imageobject>
		</mediaobject>
   		</example>
   		<example> <title>Identity DAO Interface</title>
   		<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/Screenshot_2.png" width="100%"/>
		  </imageobject>
		</mediaobject>
   		</example>
   		<example> <title>Log Manager</title>
   		<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/Screenshot_3.png" width="100%"/>
		  </imageobject>
		</mediaobject>
   		</example>
   		<example> <title>I am Web Java Script </title>
   		<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/iamweb_javascript.JPG" width="100%"/>
		  </imageobject>
		</mediaobject>
   		</example>
   		<example>
			<title>User Data Model</title>
			<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/cred1.png" width="100%"/>
		  </imageobject>
		</mediaobject>
		<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/cred2.png" width="100%"/>
		  </imageobject>
		</mediaobject>
		</example>
		<example>
			<title>Identity Data Model</title>
			<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/iden1.png" width="100%"/>
		  </imageobject>
		</mediaobject>
		<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/id2.png" width="100%"/>
		  </imageobject>
		</mediaobject>
		<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/id3.png" width="100%"/>
		  </imageobject>
		</mediaobject>
		</example>
		<example>
			<title>POST Search Web Servlet</title>
			<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/webservlet_search.JPG" width="100%"/>
		  </imageobject>
		</mediaobject>
		</example>
		<example>
			<title>Iam Core Unit Test Snippet</title>
			<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/IamCoreUnitTest.JPG" width="100%"/>
		  </imageobject>
		</mediaobject>
		</example>
		<example>
			<title>Web Servlets Unit Test Code Snippet with Mocking </title>
			<mediaobject>
   			<imageobject>
		    <imagedata fileref="resources/IamwebuintTest.JPG" width="100%"/>
		  </imageobject>
		</mediaobject>
		</example>
   </sect1>
   <sect1>
   		<title>6. Bibliography</title>
   		<orderedlist>
   			<listitem>
   			<para><link xlink:href = "http://thomas-broussard.fr/work/java/courses/index.xhtml">http://thomas-broussard.fr/work/java/courses/index.xhtml</link></para>	
   			</listitem>
   			<listitem>
   			<para><link xlink:href = "https://db.apache.org/derby/papers/">https://db.apache.org/derby/papers/</link></para>	
   			</listitem>
   			<listitem>
   			<para><link xlink:href = "https://docs.oracle.com/javase/tutorial/">https://docs.oracle.com/javase/tutorial/</link></para>	
   			</listitem>
   			<listitem>
   			<para><link xlink:href = "http://www.jasypt.org/encrypting-configuration.html">http://www.jasypt.org/encrypting-configuration.html</link></para>	
   			</listitem>
   			<listitem>
   			<para><link xlink:href = "https://dzone.com/refcardz/mockito">https://dzone.com/refcardz/mockito</link></para>	
   			</listitem>
   			<listitem>
   			<para><link xlink:href = "http://logging.apache.org/log4j/2.x/">http://logging.apache.org/log4j/2.x/</link></para>	
   			</listitem>
   			<listitem>
   			<para><link xlink:href = "http://spring.io/ and http://hibernate.org/">http://spring.io/ and http://hibernate.org/</link></para>	
   			</listitem>
   		</orderedlist>
   </sect1>
</article>